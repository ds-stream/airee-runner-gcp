apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    iam.gke.io/gcp-service-account: {{RUNNER_SA}}
  name: runner-account
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gcr-credentials-sync
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs:
  - get
  - create
  - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gcr-credentials-sync
subjects:
- kind: ServiceAccount
  name: runner-account
roleRef:
  kind: Role
  name: gcr-credentials-sync
  apiGroup: ""
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: gcr-credentials-sync
spec:
  suspend: false
  schedule: "*/45 * * * *"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: runner-account
          restartPolicy: Never
          containers:
          - image: google/cloud-sdk
            name: create-secret
            imagePullPolicy: IfNotPresent
            env:
            - name: SECRET_NAME
              value: gcr-credentials
            - name: GCR_REGISTRY
              value: gcr.io
            command:
            - /bin/bash
            - -ce
            - |-
              kubectl create secret docker-registry $SECRET_NAME \
                --dry-run=client \
                --docker-server="$GCR_REGISTRY" \
                --docker-username=oauth2accesstoken \
                --docker-password="$(gcloud auth print-access-token)" \
                -o yaml | kubectl apply -f -
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{DEPLOYMENT_NAME}}
spec:
  serviceName: "{{DEPLOYMENT_NAME}}"
  template:
    metadata:
      labels:
        app: runner-application
        type: cicd
    spec:
      containers:
        - name: runner-container
          image: gcr.io/{{PROJECT_ID}}/runner-application
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2376
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_TLS_VERIFY
              value: "1"
            - name: RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ORGANIZATION
              value: {{GH_ORGANIZATION}}
            - name: REPO_URL
              value: https://github.com/$(ORGANIZATION)
            - name: RUNNER_LABELS
              value: {{GHR_LABELS}}
          volumeMounts:
            - mountPath: /certs/client
              name: some-docker-certs-client
              readOnly: true
        - name: dind-daemon
          image: docker:20.10-dind # docker:1.12.6-dind
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          securityContext:
              privileged: true
          volumeMounts:
            - name: docker-graph-storage
              mountPath: /var/lib/docker
            - name: some-docker-certs-ca
              mountPath: /certs/ca
            - name: some-docker-certs-client
              mountPath: /certs/client
      serviceAccountName: runner-account
      volumes:
        - name: docker-graph-storage
          emptyDir: {}
        - name: some-docker-certs-ca
          emptyDir: {}
        - name: some-docker-certs-client
          emptyDir: {}
  replicas: {{REPLICA_NUM}}
  selector:
    matchLabels:
      type: cicd
